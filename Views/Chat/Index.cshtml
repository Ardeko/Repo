@{
    Layout = null;
    var username = ViewBag.Username; 
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>REVO Chat</title>
    <link rel="stylesheet" href="~/css/site.css">
</head>
<body>
    <div class="chat-container">
        <h3>REVO Sohbet Odası - Hoş geldin, @username</h3>
        <div id="messagesList"></div>
        <input type="text" id="messageInput" placeholder="Mesaj yaz..." />
        <button onclick="sendMessage()">Gönder</button>

        <button id="startCallButton">Sesli Sohbeti Başlat</button>
        <button id="endCallButton" style="display:none;">Sesli Sohbeti Sonlandır</button>

        <audio id="localAudio" autoplay muted></audio>
        <audio id="remoteAudio" autoplay></audio>
    </div>

    <div id="connectionStatus" style="display:none; color: #00ff00; font-weight: bold; text-align: center; margin-top: 20px;">Bağlantı kuruldu!</div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        let peerConnection;
        let localStream;
        const currentUsername = "@username"; // Kullanıcı adını bir değişkene al

        // WebRTC için STUN sunucusu
        const configuration = {
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        };

        // SignalR bağlantısını başlatma
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        // Mesajları al ve ekrana yazdır
        connection.on("ReceiveMessage", function (user, message) {
            const msg = document.createElement("div");
            msg.classList.add("message");
            msg.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(msg);
            document.getElementById("messagesList").scrollTop = document.getElementById("messagesList").scrollHeight;
        });

        // Sesli görüşme için gerekli işlemleri başlat (Güncellendi)
        connection.on("ReceiveICECandidate", (user, candidateStr) => { // user parametresi eklendi
            if (user === currentUsername) return; // Kendi gönderdiğimiz adayı işlemeyi atla

            try {
                const candidate = JSON.parse(candidateStr); // JSON'dan objeye dönüştür
                console.log(`Received ICE candidate from ${user}:`, candidate);
                peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            } catch (e) {
                console.error("Error parsing ICE candidate:", e);
            }
        });

        connection.on("ReceiveOffer", (user, offerStr) => { // user parametresi eklendi
            if (user === currentUsername) return; // Kendi gönderdiğimiz offer'ı işlemeyi atla

            try {
                const offer = JSON.parse(offerStr); // JSON'dan objeye dönüştür
                console.log(`Received Offer from ${user}:`, offer);
                createAnswer(offer);
            } catch (e) {
                console.error("Error parsing offer:", e);
            }
        });

        connection.on("ReceiveAnswer", (user, answerStr) => { // user parametresi eklendi
            if (user === currentUsername) return; // Kendi gönderdiğimiz answer'ı işlemeyi atla

            try {
                const answer = JSON.parse(answerStr); // JSON'dan objeye dönüştür
                console.log(`Received Answer from ${user}:`, answer);
                peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
            } catch (e) {
                console.error("Error parsing answer:", e);
            }
        });

        // WebRTC peer connection oluşturulması
        const createPeerConnection = async () => { // Async yapıldı
            peerConnection = new RTCPeerConnection(configuration);

            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log("Sending ICE candidate:", event.candidate);
                    // ICE adayını JSON string'ine çevirerek gönder
                    connection.invoke("SendICECandidate", currentUsername, JSON.stringify(event.candidate))
                        .catch(err => console.error("Error sending ICE candidate: ", err));
                }
            };

            peerConnection.ontrack = (event) => {
                console.log("Received remote track:", event.streams[0]);
                const remoteAudio = document.getElementById("remoteAudio");
                if (remoteAudio.srcObject !== event.streams[0]) {
                    remoteAudio.srcObject = event.streams[0]; // Uzak tarafın sesi
                }
            };
            
            // Yerel medya akışını al ve peer bağlantısına ekle (Buraya taşındı ve düzeltildi)
            try {
                localStream = await navigator.mediaDevices.getUserMedia({ audio: true });
                document.getElementById("localAudio").srcObject = localStream;
                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));
                console.log("Local stream added to peer connection.");
            } catch (err) {
                console.error("Error accessing media devices for local stream:", err);
                alert("Mikrofona erişim izni vermelisiniz.");
            }
        };

        // WebRTC için offer oluşturma (Güncellendi)
        const createOffer = async () => { // Async yapıldı
            try {
                // peerConnection henüz yoksa veya null ise burada oluştur
                if (!peerConnection) {
                    await createPeerConnection();
                }

                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);
                console.log("Sending Offer:", peerConnection.localDescription);
                // Offer'ı JSON string'ine çevirerek gönder
                connection.invoke("SendOffer", currentUsername, JSON.stringify(peerConnection.localDescription))
                    .catch(err => console.error("Error sending offer: ", err));
            } catch (err) {
                console.error("Error creating offer: ", err);
            }
        };

        // WebRTC için answer oluşturma (Güncellendi)
        const createAnswer = async (offer) => { // Async yapıldı
            try {
                // peerConnection henüz yoksa veya null ise burada oluştur
                if (!peerConnection) {
                    await createPeerConnection(); // Eğer offer geliyorsa ama bizim tarafımızda bağlantı yoksa oluştur.
                }

                await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);
                console.log("Sending Answer:", peerConnection.localDescription);
                // Answer'ı JSON string'ine çevirerek gönder
                connection.invoke("SendAnswer", currentUsername, JSON.stringify(peerConnection.localDescription))
                    .catch(err => console.error("Error sending answer: ", err));
            } catch (err) {
                console.error("Error creating answer: ", err);
            }
        };

        // Mesaj gönderme fonksiyonu
        function sendMessage() {
            const message = document.getElementById("messageInput").value;
            if (message.trim() === "") return;
            connection.invoke("SendMessage", currentUsername, message) // @username yerine currentUsername kullanıldı
                .catch(err => console.error("Error sending message: ", err));
            document.getElementById("messageInput").value = "";
        }

        // Başlat butonuna tıklandığında sesli görüşmeyi başlatma
        document.getElementById("startCallButton").addEventListener("click", async () => { // async yapıldı
            try {
                await createPeerConnection(); // Peer bağlantısını ve yerel akışı oluştur
                await createOffer(); // Offer gönder
                connection.invoke("StartVoiceCall", currentUsername).catch(err => console.error("SignalR StartVoiceCall Error:", err)); // SignalR'a bildir
                document.getElementById("startCallButton").style.display = "none";
                document.getElementById("endCallButton").style.display = "inline-block";
            } catch (e) {
                console.error("Failed to start call:", e);
            }
        });

        // Sonlandır butonuna tıklandığında sesli görüşmeyi sonlandırma
        document.getElementById("endCallButton").addEventListener("click", () => {
            connection.invoke("EndVoiceCall", currentUsername).catch(err => console.error("SignalR EndVoiceCall Error:", err)); // SignalR'a bildir

            if (localStream) {
                localStream.getTracks().forEach(track => track.stop());
                document.getElementById("localAudio").srcObject = null; // Audio elemanını temizle
                localStream = null;
            }
            if (peerConnection) {
                peerConnection.close();
                peerConnection = null;
                document.getElementById("remoteAudio").srcObject = null; // Uzak audio elemanını temizle
            }
            document.getElementById("startCallButton").style.display = "inline-block";
            document.getElementById("endCallButton").style.display = "none";
        });

        // Bağlantıyı başlat
        connection.start().then(function () {
            console.log("SignalR bağlantısı başarılı!");
            document.getElementById("connectionStatus").style.display = "block"; // Bağlantı başarılı olduğunda durumu göster
        }).catch(function (err) {
            console.error("SignalR Bağlantı Hatası:", err.toString());
        });
    </script>
</body>
</html>